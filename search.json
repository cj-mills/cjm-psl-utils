[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nget_source_code\n\n get_source_code (obj:object, markdown=False, remove_documentation=False)\n\nReturns the source code of an object, with an optional markdown formatting.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nobj\nobject\n\nThe object whose source code you want to retrieve.\n\n\nmarkdown\nbool\nFalse\nReturn the source code formatted as markdown\n\n\nremove_documentation\nbool\nFalse\nRemove docstrings and comments\n\n\n\n\nget_source_code(get_source_code, markdown=True, remove_documentation=True)\n\ndef get_source_code(obj:object, # The object whose source code you want to retrieve.\n                    markdown=False, # Return the source code formatted as markdown\n                    remove_documentation=False): # Remove docstrings and comments\n    source = inspect.getsource(obj)\n    \n    if remove_documentation:\n        in_docstring = False\n        lines = source.split('\\n')\n        source = ''\n        for line in lines:\n            if line.strip().startswith(('\\'\\'\\'', '\\\"\\\"\\\"')):\n                in_docstring = not in_docstring\n            elif not in_docstring:\n                source += line + '\\n'\n        source = '\\n'.join([line for line in source.split('\\n')\n                            if not line.strip().startswith(('#'))])\n        source = source.replace('\\n\\n', '\\n')\n    if markdown:\n        source = f\"```python\\n{source}\\n```\"\n        try:\n            get_ipython\n            from IPython.display import Markdown\n            source = Markdown(source)\n        except NameError:\n            pass\n    return source\n\n\n\nsource\n\n\nfile_extract\n\n file_extract (fname, dest=None)\n\nExtract the contents of the given archive file to the destination directory.\nRaises: Exception: if the archive file format is not recognized (supported formats are gz and zip)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfname\n\n\nThe path of the archive file\n\n\ndest\nNoneType\nNone\nThe path of the destination directory\n\n\n\n\nfname = \"../images/images.zip\"\ndest = Path(\"./images\")\n\n\nprint(dest.exists())\nfile_extract(fname, dest)\nprint(dest.exists())\nprint(list(os.walk(dest))[0][2])\n\nFalse\nTrue\n['cat.jpg']\n\n\n\nsource\n\n\ndownload_file\n\n download_file (url:str, directory:str, overwrite:bool=False)\n\nDownload a file from a given URL to a specified directory.\nThis function sends a HTTP request to the URL provided, downloads the file and saves it to the specified directory. If the directory does not exist, it creates it. If the file already exists and the overwrite flag is set to False, it skips the download process.\nThe function also displays a progress bar during the download using the tqdm module, and checks if the download was successful based on the total file size. If the download is not successful, it prints an error message.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nurl\nstr\n\nThe URL of the file to download.\n\n\ndirectory\nstr\n\nThe directory where the file should be saved.\n\n\noverwrite\nbool\nFalse\nA flag to specify whether to overwrite the file if it already exists.\n\n\n\n\nurl = \"https://raw.githubusercontent.com/cj-mills/cjm-psl-utils/main/images/cat.jpg\"\ndest = Path(\"./images\")\n\n\ndownload_file(url, dest)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cjm-psl-utils",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "cjm-psl-utils",
    "section": "Install",
    "text": "Install\npip install cjm_psl_utils"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "cjm-psl-utils",
    "section": "How to use",
    "text": "How to use\n\nget_source_code\n\nfrom cjm_psl_utils.core import get_source_code\n\n\nget_source_code(get_source_code, markdown=True)\n\ndef get_source_code(obj:object, # The object whose source code you want to retrieve.\n                    markdown=False, # Return the source code formatted as markdown\n                    remove_documentation=False): # Remove docstrings and comments\n    \"\"\"\n    Returns the source code of an object, with an optional markdown formatting.\n    \"\"\"\n    # Get the source code of the object\n    source = inspect.getsource(obj)\n    \n    # If the remove_documentation flag is set to True, remove docstrings and comments\n    if remove_documentation:\n        in_docstring = False\n        lines = source.split('\\n')\n        source = ''\n        # Remove docstrings\n        for line in lines:\n            if line.strip().startswith(('\\'\\'\\'', '\\\"\\\"\\\"')):\n                in_docstring = not in_docstring\n            elif not in_docstring:\n                source += line + '\\n'\n        # Remove comments\n        source = '\\n'.join([line for line in source.split('\\n')\n                            if not line.strip().startswith(('#'))])\n        source = source.replace('\\n\\n', '\\n')\n\n    if markdown:\n        # Format the source code as markdown code block\n        source = f\"```python\\n{source}\\n```\"\n\n        # Check if the code is running in Jupyter Notebook\n        try:\n            get_ipython\n            from IPython.display import Markdown\n            # Format the source code as an IPython Markdown object\n            source = Markdown(source)\n        except NameError:\n            # If not in Jupyter Notebook, do nothing\n            pass\n    # Return the formatted source code\n    return source\n\n\n\n\nfile_extract\n\nfrom cjm_psl_utils.core import file_extract\nfrom pathlib import Path\n\n\nfname = \"../images/images.zip\"\ndest = Path(\"./images\")\n\n\nprint(dest.exists())\nfile_extract(fname, dest)\nprint(dest.exists())\nprint(list(os.walk(dest))[0][2])\n\nFalse\nTrue\n['cat.jpg']"
  }
]